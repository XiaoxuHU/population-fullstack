{"version":3,"sources":["retrive.js","component/chinaMap.js","component/provinceMap.js","App.js","serviceWorker.js","index.js"],"names":["retriveData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","backResponse","resArr","wrap","_context","prev","next","fetch","sent","json","abrupt","convertData","stop","this","_x","apply","arguments","data","map","obj","name","trim","value","chinaMap","props","option","visualMap","min","max","right","bottom","padding","text","tooltip","trigger","backgroundColor","formatter","params","textStyle","color","series","type","onEvents","click","react_default","createElement","lib_default","provinceMap","title","provinceName","left","top","App","state","chinaData","provinceData","abbrName","cityName","substring","componentDidMount","then","_this","setState","onClickHandler","e","className","component_chinaMap","component_provinceMap","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAAMA,EAAW,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSC,MAAMP,GADf,cACZC,EADYG,EAAAI,KAAAJ,EAAAE,KAAA,EAEGL,EAAaQ,OAFhB,cAEZP,EAFYE,EAAAI,KAAAJ,EAAAM,OAAA,SAGTC,EAAYT,IAHH,wBAAAE,EAAAQ,SAAAb,EAAAc,SAAH,gBAAAC,GAAA,OAAArB,EAAAsB,MAAAF,KAAAG,YAAA,GAMXL,EAAc,SAACM,GACjB,OAAOA,EAAKC,IAAI,SAAAC,GACd,MAAO,CACLC,KAAKD,EAAIC,KAAKC,OACdC,MAAMH,EAAIG,UAKH9B,qBC6BA+B,UAzCE,SAACC,GAChB,IAAIC,EAAU,CACRC,UAAW,CACTC,IAAK,IACLC,IAAK,IACHC,MAAM,EACNC,OAAO,SACPC,QAAQ,CAAC,EAAE,EAAE,EAAE,GACfC,KAAK,CAAC,aAEVC,QAAQ,CACNC,QAAQ,OACRC,gBAAgB,wBAChBC,UAAW,SAACC,GACV,OAAIA,EAAOf,MACFe,EAAOjB,KAAO,SAAWiB,EAAOf,MAAQ,mCAExC,4BAGXgB,UAAU,CACRC,MAAM,UAGVC,OAAQ,CACN,CACEC,KAAM,MACNvB,IAAK,QACLD,KAAKO,EAAMP,QAIjByB,EAAW,CACbC,MAASnB,EAAMmB,OAEf,OAAOC,EAAA/C,EAAAgD,cAACC,EAAAjD,EAAD,CACK4B,OAAQA,EACRiB,SAAUA,MCIXK,gMAxCK,SAACvB,GACjB,IAAIC,EAAS,CACTuB,MAAM,CACJhB,KAAKR,EAAMyB,aACXnB,OAAO,SACPoB,KAAK,UAEPxB,UAAW,CACPC,IAAK,IACLC,IAAK,IACLI,KAAK,CAAC,SACNkB,KAAK,EACLC,IAAI,SACJpB,QAAQ,CAAC,EAAE,EAAE,EAAE,IAEnBE,QAAQ,CACNC,QAAQ,OACRC,gBAAgB,wBAChBC,UAAW,SAACC,GACV,OAAIA,EAAOf,MACFe,EAAOjB,KAAO,SAAWiB,EAAOf,MAAQ,mCAExC,4BAGXgB,UAAU,CACRC,MAAM,UAGRC,OAAQ,CAAC,CACLC,KAAM,MACNvB,IAAKM,EAAMyB,aACXhC,KAAKO,EAAMP,QAGrB,OAAO2B,EAAA/C,EAAAgD,cAACC,EAAAjD,EAAD,CACC4B,OAAQA,MCoBL2B,6MAtDbC,MAAQ,CACNJ,aAAe,GACfK,UAAY,GACZC,aAAe,MAGjBC,SAAW,SAACC,GACV,MAAiB,yCAAbA,GAAsC,6BAAbA,EACpBA,EAASC,UAAU,EAAE,GAEvBD,EAASC,UAAU,EAAE,MAG9BC,kBAAoB,WACCnE,EAAY,iBAClBoE,KAAK,SAAA3C,GAChB,OAAOA,EAAKC,IAAI,SAAAC,GACZ,MAAO,CACLC,KAAOyC,EAAKL,SAASrC,EAAIC,MACzBE,MAAQH,EAAIG,WAGjBsC,KAAK,SAAA3C,GAAI,OAAI4C,EAAKC,SAAS,CAACR,UAAUrC,SAG3C8C,eAAiB,SAACC,GAChB,IAAI5C,EAAO4C,EAAE5C,KACbyC,EAAKC,SAAS,CAACb,aAAa7B,IACb5B,EAAY,IAAM4B,GACxBwC,KAAK,SAAA3C,GAAI,OAAI4C,EAAKC,SAAS,CAACP,aAActC,+EAGnD,OACE2B,EAAA/C,EAAAgD,cAAA,WACED,EAAA/C,EAAAgD,cAAA,gCACAD,EAAA/C,EAAAgD,cAAA,OAAKoB,UAAU,aACbrB,EAAA/C,EAAAgD,cAAA,OAAKoB,UAAU,SACbrB,EAAA/C,EAAAgD,cAACqB,EAAD,CACEvB,MAAO9B,KAAKkD,eACZ9C,KAAMJ,KAAKwC,MAAMC,aAGrBV,EAAA/C,EAAAgD,cAAA,OAAKoB,UAAU,YACbrB,EAAA/C,EAAAgD,cAACsB,EAAD,CACElB,aAAcpC,KAAKwC,MAAMJ,aACzBhC,KAAMJ,KAAKwC,MAAME,yBA9Cba,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAA/C,EAAAgD,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.8a061878.chunk.js","sourcesContent":["const retriveData = async (url) => {\r\n    let backResponse = await fetch(url);\r\n    let resArr = await backResponse.json();\r\n    return convertData(resArr);\r\n}\r\n\r\nconst convertData = (data) => {\r\n    return data.map(obj => {\r\n      return {\r\n        name:obj.name.trim(),\r\n        value:obj.value\r\n      }\r\n    })\r\n}\r\n\r\nexport default retriveData;","import React from 'react';\r\nimport ReactEcharts from 'echarts-for-react';\r\nimport 'echarts/map/js/china';\r\nconst chinaMap = (props) => {\r\n  let option =  {\r\n        visualMap: {\r\n          min: 100,\r\n          max: 1000,\r\n            right:0,\r\n            bottom:'bottom',\r\n            padding:[5,0,5,5],\r\n            text:['Density:'],\r\n          },\r\n        tooltip:{\r\n          trigger:'item',\r\n          backgroundColor:'rgba(250,250,250,0.9)',\r\n          formatter: (params) => {\r\n            if (params.value) {\r\n              return params.name + '<br />' + params.value + ' 人/平方公里';\r\n            } else {\r\n              return '<br />' + '无数据';\r\n            }\r\n          },\r\n          textStyle:{\r\n            color:'black',\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            type: 'map',\r\n            map: 'china',\r\n            data:props.data,\r\n          },\r\n        ]\r\n  };\r\n  let onEvents = {\r\n    'click': props.click,\r\n  };\r\n    return <ReactEcharts\r\n                option={option}\r\n                onEvents={onEvents}\r\n            />\r\n}\r\n\r\nexport default chinaMap;","import React from 'react';\r\nimport ReactEcharts from 'echarts-for-react';\r\nimport * as provinces from '../indexProvinces';\r\n\r\nconst provinceMap = (props) => {\r\n    let option = {\r\n        title:{\r\n          text:props.provinceName,\r\n          bottom:'bottom',\r\n          left:'center',\r\n        },\r\n        visualMap: {\r\n            min: 100,\r\n            max: 1000,\r\n            text:['p/km2'],\r\n            left:0,\r\n            top:'bottom',\r\n            padding:[5,5,5,0],\r\n          },\r\n        tooltip:{\r\n          trigger:'item',\r\n          backgroundColor:'rgba(250,250,250,0.9)',\r\n          formatter: (params) => {\r\n            if (params.value) {\r\n              return params.name + '<br />' + params.value + ' 人/平方公里';\r\n            } else {\r\n              return '<br />' + '无数据';\r\n            }\r\n          },\r\n          textStyle:{\r\n            color:'black',\r\n          },\r\n        },\r\n          series: [{\r\n              type: 'map',\r\n              map: props.provinceName,\r\n              data:props.data,\r\n          }]\r\n    }\r\n    return <ReactEcharts\r\n            option={option}\r\n            />\r\n}\r\n\r\nexport default provinceMap;","import React, { Component } from 'react';\nimport './App.css';\nimport retriveData from './retrive';\nimport ChinaMap from './component/chinaMap';\nimport ProvinceMap from './component/provinceMap';\nclass App extends Component {\n  state = {\n    provinceName : '',\n    chinaData : [],\n    provinceData : [],\n  };\n\n  abbrName = (cityName) => {\n    if (cityName === '内蒙古自治区' || cityName === '黑龙江省') {\n      return cityName.substring(0,3);\n    }\n    return cityName.substring(0,2);\n  }\n  \n  componentDidMount = () => {\n    let receivedData = retriveData('/中国');\n    receivedData.then(data => {\n      return data.map(obj =>{\n          return {\n            'name':this.abbrName(obj.name),\n            'value':obj.value\n          } \n      })\n    }).then(data => this.setState({chinaData:data}))\n  }\n\n  onClickHandler = (e) => {\n    let name = e.name;\n    this.setState({provinceName:name});\n    let tempData = retriveData('/' + name);\n    tempData.then(data => this.setState({provinceData: data}));\n  }\n  render() {\n    return (\n      <div>\n        <h1>Chinese Population</h1>\n        <div className=\"container\">\n          <div className=\"china\">\n            <ChinaMap \n              click={this.onClickHandler} \n              data={this.state.chinaData} \n            />\n          </div>\n          <div className=\"province\">\n            <ProvinceMap \n              provinceName={this.state.provinceName}\n              data={this.state.provinceData}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}